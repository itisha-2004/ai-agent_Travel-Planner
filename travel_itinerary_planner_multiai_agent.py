# -*- coding: utf-8 -*-
"""Travel_Itinerary_Planner_MultiAI_Agent.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13WdB7mHL4lepls2ZDHT2u3Ktx_RMF8NH

## Key Components

1. **StateGraph**: The core of our application, defining the flow of our Travel Planner.
2. **PlannerState**: A custom type representing the state of our planning process.
3. **Node Functions**: Individual steps in our planning process (input_city, input_interests, create_itinerary).
4. **LLM Integration**: Utilizing a language model to generate the final itinerary.
"""

!pip install langchain langchain_core langchain_groq langchain_community langchain langgraph

import os
from typing import TypedDict, Annotated, List
from langgraph.graph import StateGraph, END
from langchain_core.messages import HumanMessage, AIMessage
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.runnables.graph import MermaidDrawMethod
from IPython.display import display, Image

"""Define Agent"""

class PlannerState(TypedDict):
  messages : Annotated[List[HumanMessage | AIMessage], "the messages in the conversation"]
  city: str
  interests: List[str]
  itinerary: str

from langchain_groq import ChatGroq
llm = ChatGroq(
    temperature = 0,
    groq_api_key = "",
    model_name = "llama-3.3-70b-versatile"
)

itinerary_prompt = ChatPromptTemplate.from_messages([
    ("system", "You are a helpful travel assistant. Create a day trip itinerary for {city} based on the user's interests: {interests}. Provide a brief, bulleted itinerary."),
    ("human", "Create an itinerary for my day trip."),
])

"""Define agent Function"""

def input_city(state: PlannerState) -> PlannerState:
  print("Please enter the city you want to visit for your day trip: ")
  user_message = input("Your Input: ")
  return {
      **state,
      "city": user_message,
      "messages": state['messages'] + [HumanMessage(content=user_message)]
  }

def input_interest(state: PlannerState) -> PlannerState:
  print(f"Please enter your interest for the trip to : {state['city']} (comma-separted): ")
  user_message = input("Your Input: ")
  return {
      **state,
      "interests": [interest.strip() for interest in user_message.split(",")],
      "messages": state['messages'] + [HumanMessage(content=user_message)]
  }
def create_itinerary(state: PlannerState) -> PlannerState:
  print(f"Creating an itinerary for {state['city']} based on interests : {', '.join(state['interests'])}")
  response = llm.invoke(itinerary_prompt.format_messages(city = state['city'], interests = ','.join(state['interests'])))
  print("\nFinal Itinerary: ")
  print(response.content)
  return {
      **state,
      "messages": state['messages'] + [AIMessage(content=response.content)],
      "itinerary" : response.content,
  }

"""Create and Compile the Graph"""

workflow = StateGraph(PlannerState)

workflow.add_node("input_city", input_city)
workflow.add_node("input_interest", input_interest)
workflow.add_node("create_itinerary", create_itinerary)

workflow.set_entry_point("input_city")

workflow.add_edge("input_city", "input_interest")
workflow.add_edge("input_interest", "create_itinerary")
workflow.add_edge("create_itinerary", END)

app = workflow.compile()

"""Display the graph structure"""

display(
    Image(
        app.get_graph().draw_mermaid_png(
            draw_method = MermaidDrawMethod.API
        )
    )
)

"""Define the function thats runs the graph"""

def travel_planner(user_request: str):
  print(f"Initial Request: {user_request}\n")
  state = {
      "messages": [HumanMessage(content=user_request)],
      "city": "",
      "interests": [],
      "itinerary": "",
  }
  for output in app.stream(state):
    pass

user_request = input("Enter your travel request: ")
travel_planner(user_request)

!pip install gradio

import gradio as gr
import os
from typing import TypedDict, List
from dotenv import load_dotenv
from langchain_core.messages import HumanMessage, AIMessage
from langchain_core.prompts import ChatPromptTemplate
from langchain_groq import ChatGroq

# Load environment variables
load_dotenv()
api_key = os.getenv("GROQ_API_KEY")

if not api_key:
    raise ValueError("GROQ_API_KEY not found in .env file")

#   PlannerState
class PlannerState(TypedDict):
    messages: List[HumanMessage | AIMessage]
    country: str
    interests: List[str]
    days: int
    budget: str
    travel_type: str
    itinerary: str

#  LLM Setup
llm = ChatGroq(
    temperature=0.4,
    groq_api_key=api_key,
    model_name="llama3-70b-8192"  # double check this name from Groq docs
)


itinerary_prompt = ChatPromptTemplate.from_template("""
You are an intelligent travel assistant.

Plan a {days}-day trip to {country} for a {travel_type} traveler with a {budget} budget.

Focus on these preferences: {interests}

The itinerary should be detailed, creative, and day-wise. Include:
- 3â€“4 key activities per day
- A mix of sightseeing, food, culture, and rest (if applicable)
""")

# Planner Function
def input_fields(country: str, interests: List[str], days: int, budget: str, travel_type: str) -> str:
    state: PlannerState = {
        "messages": [],
        "country": country,
        "interests": interests,
        "days": days,
        "budget": budget,
        "travel_type": travel_type,
        "itinerary": ""
    }
# call llm
    formatted_prompt = itinerary_prompt.format_messages(
        country=country,
        interests=", ".join(interests),
        days=days,
        budget=budget,
        travel_type=travel_type
    )

    state["messages"].append(HumanMessage(content=f"{country}, {interests}, {days}, {budget}, {travel_type}"))
    response = llm.invoke(formatted_prompt)
    state["itinerary"] = response.content
    state["messages"].append(AIMessage(content=response.content))

    return response.content

# Gradio UI
interface = gr.Interface(
    fn=input_fields,
    inputs=[
        gr.Dropdown(label="Select country", choices=["India", "France", "Japan", "USA", "Italy", "Australia"]),
        gr.CheckboxGroup(label="Your preferences", choices=[
            "Adventure", "Beaches", "Mountains", "Food", "Culture", "Shopping", "Nightlife", "Wildlife"
        ]),
        gr.Slider(label="Trip duration (days)", minimum=1, maximum=14, step=1, value=3),
        gr.Radio(label="Budget", choices=["Low", "Medium", "High"]),
        gr.Radio(label="Travel type", choices=["Solo", "Couple", "Family", "Friends"])
    ],
    outputs=gr.Textbox(label="ðŸ“… AI-Powered Itinerary"),
    title="ðŸ§³ Personalized Travel Planner",
    description="Select your travel preferences. Get a customized, day-wise itinerary powered by AI."
)

interface.launch()

